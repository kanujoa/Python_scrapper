1. print 함수에 (데이터, 데이터, 데이터,.......) 이렇게 여러개의 인자를 입력해줄 수 있는 것처럼 say_hello에도 똑같은 것을 해 줄
것이다. 그러기 위해서는 함수로 전달하는 데이터를 저장하기 위한 그릇(placeholder) 역할을 하는 parameter 작성 위치로 와서
이미 작성되어 있는 parameter인 user_name 옆에 콤마를 적고 새로운 파라미터를 적어주면 된다. 
나이를 추가하고 싶으므로 user_age라고 parameter 이름을 정하겠다.
def say_hello(user_name, user_age):
  print("hello", user_name, "how r u?")

say_hello("nico")


2. but 우리가 say_hello 함수를 call할 때 실제로 필요한 데이터를 전부 보내주지 않아서 오류가 발생하였다. 첫번째 argument는
보내주었지만 두번째 argument는 보내주지 않았다. 두번째 argument는 "nico" 옆에 콤마를 적고 적어주면 된다.
say_hello("nico", 12)

데이터를 넣어주는 순서도 매우 중요하다!
첫번째 argument "nico"는 첫번째 parameter인 user_name에 저장될 것이다.
두번째 argument 12는 두번째 parameter인 user_age에 저장될 것이다.
이 순서를 바꾸어 적으면 문장이 어색하게 될 것이다. 

이번에는 print를 2번 써서 코드를 작성해 보자.     --> 두 줄로 결과가 나오게 된다.
def say_hello(user_name, user_age):
  print("hello", user_name, "how r u?")
  print("you are", user_age, "years old")

say_hello("nico", 12)


3. 2개 이상의 argument를 주는 것도 물론 가능하다. 그런데 조심해야 할 것은 설정한 parameter 수와 주는 argument 수를 
동일하게 해 주어야 오류가 발생하지 않는다는 것이다.

파이썬 제작자들이 print 함수 같은 것을 만들었을 때, say_hello와 같은 식으로 구현하였다. but 무한대 개수의 argument와
무한대 개수의 값들을 허용한다는 점에서는 차이가 있다.