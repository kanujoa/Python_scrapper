1.
for website in websites:
  if not website.startswith("https://"):
    website = f"https://{website}"
  get(website)     --> print를 get으로 수정, get function은 response를 return해준다.
우리는 get 함수가 return해주는 값을 가져올 것이다.

for website in websites:
  if not website.startswith("https://"):
    website = f"https://{website}"
  response = get(website)     --> response 변수 생성
  print(response)     --> get 함수가 return하는 값 출력
결과로 <Response [200]>이 5번 뜬다. 이것의 의미는 웹사이트가 성공적으로 응답했다는 것이다.

2. 인터넷은 HTTP protocol에 기반한다고 말할 수 있다.
request 결과가 정상인지 아닌지를 확인할 수 있는 수단이 있어야 하는데 request의 결과를 확인하는 방법으로 HTTP 코드를 사용한다.
get function이 request한 response는 다른 것도 가지고 있는데, 예를 들면 상태 코드이다. 앞에서는 string으로 된 코드를 결과로 받았지만 
우리가 원하는 것은 '상태 코드'를 받는 것이다. 즉, 숫자만 받는 것이다. 이는 status_code 메소드를 사용하면 된다.

print(response.status_code)     --> 결과로 200이 5번 출력된다. 문자들을 제외한 숫자(상태 코드)만 출력된 것이다.


3. 이제 if-else문을 활용하여 웹사이트의 상태를 알려주는 코드를 작성해 볼 것이다.
이것 또한 반복시켜야 하는 것이므로 response 아래에 for문에 속하게 적어주어야 한다.
if response.status_code == 200:     --> 응답(string으로 상태 전달)에서의 상태 코드가 200일 때
    print(f"{website} is OK")     --> 해당 website가 잘 돌아간다는 멘트 출력
  else:     --> 상태코드가 200이 아닐 때
    print(f"{website} not OK")     --> 해당 웹사이트에 문제가 있다는 멘트 출력

모든 웹사이트가 정상적으로 잘 돌아간다는 결과를 볼 수 있다.

4. 이제 응답으로 dictionary를 만들어볼 것이다.
for문에서 요소들을 추가시킬 것이므로 for문 바로 이전에 results = {} 라는 빈 dictionary를 만들어 놓는다.
그리고 if-else 문에서 print 부분을 result 딕셔너리에 결과를 추가시키는 방식으로 코드를 수정할 것이다.
if response.status_code == 200:     --> 상태코드 200일 때
    results[website] = "OK"     --> 해당 website를 key로 하고 "OK"를 value로 하는 key-value 쌍을 dictionary result에 추가한다.
  else:     --> 상태코드 200이 아닐 때
    results[website] = "FAILED"     --> 해당 website를 key로 하고 "FAILED"를 value로 하는 key-value 쌍을 dictionary result에 추가한다.

print(results)     --> 튜플 안에 모든 website는 상태코드가 200이기 때문에 {'https://google.com': 'OK', ..........} 이런 식으로 이루어진 dictionary를
                           결과로 얻을 수 있다.