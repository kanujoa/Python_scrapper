1. tuple을 만들어 그 안에 있는 웹사이트가 동작중인지 내려갔는지를 확인해 보자.
websites = (
  "google.com",
  "airbnb.com",
  "twitter.com",
  "facebook.com"
)
인덱싱을 이용하면 내가 원하는 결과를 얻을 수 있겠지만 번거롭고 시간이 오래 걸린다. 또한 tuple 안의 요소들에 변화가 생기면(추가, 삭제 등)
코드가 완전히 바뀌어야 하므로 문제가 생긴다.
따라서 우리는 리스트의 길이에 구애받지 않고 파이썬에게 list의 각 item을 활용해서 자동으로 코드를 실행하라고 할 방법을 모색해야 한다.

2. for loop(for 반복문) 사용
for each in websites:     --> each에는 websites tuple 안에 있는 요소 하나하나가 대입된다.
  print("hello")     --> 결과: hello가 요소의 개수만큼 4번 출력됨. (tuple의 각 아이템 하나하나에 코드가 적용됨.) 

websites tuple에 "tiktok.com" 이라는 새로운 element를 추가해도 코드가 정상적으로 작동한다. 단, 요소 하나가 추가되어 5개가 되었으므로
hello도 5번 출력된다.
list에서도 작동 가능하다.

3. iterable한 자료형(반복 가능한 자료형 --> 리스트, 튜플 같은)에서 어떤 item을 작업하고 있는지 알고 싶으면 다음과 같이 하면 된다.
* for은 각각의 item이 실행될 때 placeholder를 만드는 것을 허락해 준다.
ex) for potato in websites:
        print("potato is equals to", potato)
현재 어떤 item이 처리되고 있는지를 알아야 하기 때문에 위에서는 potato로 python으로부터 우리가 그 item에 접근할 수 있게 만들어 
주었다. google.com부터 facebook.com까지 차례대로 potato에 대입되게 된다.
potato 대신에 가독성이 좋게 website같은 이름의 변수로 바꾸어 주면 좋다.