1. list의 장점
- 데이터에 적용 가능한 메소드를 사용 가능하다.
ex1) count 메소드
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
print(days_of_week.count("Wed"))      --> days_of_week에서 "Wed" 의 개수를 반환한다. 따라서 결과는 1

ex2) clear 메소드
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
days_of_week.clear()     --> days_of_week 리스트를 아예 비우는 역할을 하는 메소드 사용
print(days_of_week)     --> 결과: [ ]

* 프로그램 언어에서 modify(수정하다) == mutate(변화시키다)

ex3) reverse 메소드
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
days_of_week.reverse()     --> 리스트를 뒤집는 기능을 한다.
print(days_of_week)     --> 결과로 데이터가 완전히 변경되었다. clear때랑 비슷한 케이스 (결과: ['Fri', 'Thur', 'Wed', 'Tue', 'Mon'])

ex4) append 메소드
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
days_of_week.append("Sat")     --> 리스트에 요소를 추가하는 기능을 한다. (주의! 인자는 하나만 주어질 수 있다.)
days_of_week.append("Sun")
print(days_of_week)

ex5) remove 메소드
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
days_of_week.remove("Fri")     --> 리스트에서 요소를 제거하는 기능을 한다.
print(days_of_week)


- 특정 item에 접근할 수 있다.
days_of_week = ["Mon", "Tue", "Wed", "Thur", "Fri"]
print(days_of_week[3])     --> 결과: Thur (컴퓨터는 0부터 세는 것 기억!!)
만약 Wed를 얻고 싶다면 2를 입력해야 한다.

- list에는 꼭 문자열만 넣을 수 있는 것은 아니다. 숫자, boolean 자료형 등등 여러가지를 넣는 것이 가능하다. 리스트 안에 리스트를 만들
  수도 있다.