1. dictionary
사전을 보면 단어와 그 단어의 정의가 나와 있다. 이를 프로그램의 dictionary에 적용시키면 단어는 곧 key이고, 단어의 정의는 value에
해당된다. (키-값 쌍이 단어와 단어 정의 쌍처럼 짝을 지은 것이라고 생각하면 된다.)

2. dictionary 사용법: { }(중괄호) 안에 key: value 형식으로 입력해 주고, key-value 쌍은 쉼표로 구분해 준다.
player = {
  'name': 'nico',     --> value가 string이다.     
  'age': 12,     --> value가 number이다.
  'alive': True     --> value가 boolean이다.
}
위는 player라는 이름의 딕셔너리를 만들어서 이 안에 name, age, alive라는 속성(property)을 만든 것이다.

print(player)     --> 결과: {'name: 'nico', 'age': 12, 'alive': True}

3. 메소드 사용하기
list와 tuple에서 메소드를 사용할 수 있었던 것처럼 dictionary에서도 메소드 사용이 가능하다.
player에 온점을 찍으면 사용 가능한 메소드를 확인할 수 있다.
dictionary는 list처럼 mutable(객체 생성 후에도 수정이 가능)하기 때문에 tuple보다 더 많은 메소드 사용이 가능하다.

ex1) get 메소드
player = {'name': 'nico', 'age': 12, 'alive': True}
print(player.get('age'))     --> key를 인자로 넣어서 그에 해당하는 value를 반환해준다.

player에 리스트 value를 추가하여 진행해 보자.
player = {
  ..........
  'fav_food': ["🍕", "🍔"]     --> list를 value로 추가했다.
}
print(player.get('fav_food'))     --> 결과: ['🍕', '🍔'] (print(player['fav_food'])의 결과와 동일하다.)

ex2) pop 메소드
player.pop('age')     --> key가 'age'인 key-value 쌍을 삭제하게 해 준다.
print(player)

4. 리스트(혹은 튜플)와 딕셔너리의 차이점
매우 다르다. 숫자 목록이나 todo-list, 어떤 목록이 있다면 그것은 리스트나 튜플이 될 수 있다. but 딕셔너리는 많은 속성들을 가지고 있
는 데이터를 만들 때 쓰인다.

5. 딕셔너리에서 data 추가하기
dict_name[key] = value 이 형태로 추가하고 싶은 data를 입력해 주면 된다.

player['xp'] = 1500     --> player dictionary에 key가 xp이고 value가 1500인 data를 추가하고자 한다.
print(player)     --> dictionary의 마지막에 'xp': 1500 이렇게 추가된 결과가 나온다.

그리고 아까 list 형태의 value를 적어주었었다. 우리는 이 list 안에 값을 추가할 수 있다.
player['fav_food'].append("🍜")     --> player['fav_food']는 곧 key가 fav_food일때의 value인 ["🍕", "🍔"]를 의미하므로 list에 append 메소
                                              드를 쓰는 것과 같게 된다.
print(player.get('fav_food'))     --> 결과는 ['🍕', '🍔', '🍜']이다. player['fav_food'] 로 작성해도 같은 결과가 나온다.