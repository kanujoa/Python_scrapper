1. file.py라는 파일을 새로 만들고 save_to_file이라는 함수를 하나 만들 것이다. save_to_file 함수가 file_name, jobs이렇게 2개의 인자를 받도록 설정해 보자.
그리고 이전 시간에 main.py에서 했던 것과 동일한 방식으로 파일을 작성하고 닫아줄 것이다. 

def save_to_file(file_name, jobs):
  file = open(f"{file_name}.csv", "w")     --> parameter가 file_name이므로 keyword였던 부분을 file_name으로 바꾸어 주었다.
  file.write("Position, company, Location, URL\n")
  
  for job in jobs:
    file.write(
      f"{job['position']}, {job['company']}, {job['location']}, {job['link']}\n")
  
  file.close()


2. main.py의 파일 열고닫기 부분은 아까 만든 save_to_file 함수로 대체한다.

from extractors.indeed import extract_indeed_jobs
from extractors.wwr import extract_wwr_jobs
from file import save_to_file

keyword = input("What do you want to search for?:")

indeed = extract_indeed_jobs(keyword)
wwr = extract_wwr_jobs(keyword)
jobs = indeed + wwr

save_to_file(keyword, jobs)     --> 정상적으로 동작하는 것을 확인하고 main.py의 내용을 모두 지운다.


3. packages에서 Flask를 설치하고 사용해 볼 것이다. 그리고 main.py에 Flask를 import한다.
from flask import Flask

그리고 앱 이름을 자신이 원하는 것으로 결정한다. (강의에서는 JobScrapper라고 하였다.)
app = Flask("JobScrapper")     --> 이 app 변수를 많이 활용할 것이다.

이제 애플리케이션을 실행할 것이다. 이 python 코드는 replit에서 만든 virtual machine에서 실행될 것이다. 따라서 replit에서 우리가 만든 웹사이트로의 접속을 열어
달라고 알려주어야 한다.
app.run("0.0.0.0")     --> 이 작업은 우리가 replit에서 작업하고 있기 때문에 해야 하는 작업이다. (이 3줄로 서버를 만듦)

play 버튼을 누르면 서버와의 연결을 요청하게 되므로 replit이 우리에게 작은 브라우저 창을 열어주었다. 실행만 하고 아직 아무것도 작성하지 않았으므로 결과는 없
다.
브라우저 창에 Not Found가 뜬다면 그것은 user가 홈페이지로 접속하였을 때 reply하는 어떤 코드도 작성하지 않았기 때문이다. 현재는 user의 요청만 받고 있다.


4. 이제 사용자가 홈페이지에 접속했을 때 어떻게 reply해야 할까?
from flask import Flask

app = Flask("Jobscrapper")

@app.route("/")     --> 이 decorator를 아래에 reply로써 실행하고 싶은 함수와 함께 적어주면 된다. (괄호 안에는 페이지 이름을 적어주면 된다.)
def home():
  return 'hey there!'     --> 사용자가 홈페이지에 접속하면 hey there이라는 문구가 뜨게 된다.

app.run("0.0.0.0")

이제 webview에 나와 있는 주소를 다른 컴퓨터나 스마트폰 같은 곳에 붙여넣기 하여도 똑같이 잘 작동할 것이다. Flask는 실제 웹 서버이기 때문이다.
