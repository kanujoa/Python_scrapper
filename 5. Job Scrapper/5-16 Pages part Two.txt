1.
count = len(pages)     --> div의 개수가 곧 페이지개수+ 화살표 개수 이다. 따라서 pages의 길이를 세어야 하기 때문에 count 변수에 넣어줌.
  if count >= 6:     --> 6개 이상이면 페이지수 5를 반환(5페이지를 넘어가는 것을 무시한다는 뜻)
    return 5
  else:     --> 5개 미만이면 그 페이지수 자체를 반환
    return count

그리고 우리는 전 시간에 pagination의 결과가 None이 나오는 경우는 페이지수가 하나라는 의미이므로 1을 return하도록 하는 조건문을 작성하였다.
하지만 현재 날짜 기준으로 코드가 바뀌어 None이 뜰 일이 없으므로 그 코드를 지워주고 count가 0일 때의 경우를 만들어서 1을 return하는 코드를 작성한다.
그리고 페이지수가 2 이상 5 이하일 때에도 화살표가 뜬다. 따라서 이 화살표의 개수를 없애주는 코드도 작성해야 한다.

count = len(pages)
  if count >= 6:
    return 5
  elif count == 0:     --> 주목!!
    return 1
  elif 2<= count <=5:
    return (count-1)

print(get_page_count("python"))     --> 결과: 5
print(get_page_count("next.js"))     --> 결과: 2
print(get_page_count("django"))     --> 결과: 5
print(get_page_count("nest.js"))     --> 결과: 1


2. 이제 get_page_count 함수가 완성되었으므로 이것을 range 함수를 같이 활용해 extract_indeed_jobs 함수에 넣어 준다. 함수에 넣어주게 되면 extract_indeed_jobs
   함수는 코드를 실행해야 할 횟수를 받을 수 있는 것이다.

def extract_indeed_jobs(keyword):
  pages = get_page_count(keyword)
  for page in range(pages):
    options = Options()
    options.add_argument("--no-sandbox")
    ..........