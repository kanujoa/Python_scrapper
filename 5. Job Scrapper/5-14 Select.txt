1. class가 resultContent인 td tag 안에 속해 있는 "jobTitle........" class를 가진 h2 tag 안에 속해 있는 a tag에 주목하자. 
이 태그 안에 적혀 있는 text를 확인해 보면 채용공고의 제목 부분을 가리키는데 대부분의 경우 직업 이름과 일치한다.

이를 위해 h2 먼저 가져와 볼 것이다. h2의 class 이름에는 여러 가지가 적혀 있는데 이 중 'jobTitle'이라는 이름이 가장 고유할 가능성이 높기 때문에 이를 이용해 가져오도록
하겠다.
또, anchor tag 안에는 직책 이름이 들어 있는 label과 자세한 채용 공고 주소가 들어 있는 href가 존재하므로 안의 span tag까지 들어가지 않아도 데이터를 스크래핑 할 수 
있다.

이번에는 find 대신에 select를 사용해 볼 것이다. select는 검색할 때 CSS selector라는 것을 사용할 수 있게 해준다.

if zone == None:
  h2 = job.find("h2", class_="jobTitle")
  a = h2.find("a")     --> find를 사용하면 이렇게 적어야 하는 코드가

if zone == None:
    anchor = job.select("h2 a")     --> 이렇게 select를 사용하여 1줄로 적어줄 수 있다. 인자로는 CSS에서 선택자를 작성하듯이 적어주면 된다. h2 tag 안에 있는 a tag를 
                                               가져오라는 의미이다. 리스트에 담겨서 나온다.
리스트가 아닌 text만 받고 싶으므로 select_one이라고 적어주면 된다.


2. 이제 a tag에서의 href와 aria-label이라는 속성(attribute)을 추출해낼 것이다.
* aria-label은 HTML element에 제공하는 속성으로 화면 리더기가 읽게 하길 원하는 텍스트를 포함시켜준다.
 
BeautifulSoup는 HTML tag들을 데이터 구조(list와 dictionary)로 변환시킨다는 것을 배웠다.
딕셔너리에서 키 값을 이용해 value를 가져올 때처럼 key 자리에 가져오고 싶은 속성 이름을 적어 data를 가져온다.

if zone == None:
    anchor = job.select_one("h2 a")
    title = anchor['aria-label']
    link = anchor['href']
    print(title, link)          -> 우리가 원하는 공고 제목과 공고 링크가 출력된다.
    print("/////////\n//////////")          --> 구분선


3. 직업이 위치한 지역이나 도시도 추출해 보자.
아까보다 조금 아래에 있는 <div>tag를 보면 company_location이라는 class를 가진 <div>가 나오고,  그것을 펼쳐보면 회사 이름이 있는 companyName class를 가진 
span과 회사 위치가 있는 companyLocation class를 가진 <div>가 나온다. 이것을 이용하면 된다.
if zone == None:
    anchor = job.select_one("h2 a")
    title = anchor['aria-label']
    link = anchor['href']
    company = job.find("span", class_="companyName")
    location = job.find("div", class_="companyLocation")


4. 이제 job_data가 담긴 딕셔너리를 이전에 만들어놓은 변수를 이용하여 구성하고, 이를 resultㄴ list를 만들어 담는다. (초기의 빈 리스트 resultㄴ는 for문 바깥에 적어주어야 한다.)
그리고 마지막으로 그 result의 요소들을 하나씩 출력해준다.

for job in jobs:
  zone = job.find("div", class_="mosaic-zone")
  if zone == None:
    anchor = job.select_one("h2 a")
    title = anchor['aria-label']
    link = anchor['href']
    company = job.find("span", class_="companyName")
    location = job.find("div", class_="companyLocation")
    job_data = {
      'link': "fhttps://kr.indeed.com{link}",     --> HTML에서의 주소는 상대경로로 적혀 있으므로 완전한 주소를 만들기 위하여 필요한 부분을 더 작성해준다. (format 사용)
      'company': company.string,     --> text로 가져와야 하므로 .string 붙이기
      'location': location.string,     --> 이하동문
      'position': title     --> aria-label를 attribute로 갖는 값
    }
    results.append(results)     --> results 리스트에 job_data 한 세트씩 추가해준다.

for result in results:
  print(result, "\n//////////\n")     --> result 하나씩 출력해보기
