1. print(soup.find_all("section", class_="jobs")) 이 코드를 자세히 살펴보자.
class_ = "jobs"     --> keyword argument
'section'     --> positional argument

<positional argument> ex)
def say_hello(name, age):     --> 여기와 아래에서 설정한 매개변수(parameter)의 위치에 기반해
  print(f"{name} you  are {age} years old")

say_hello("nico", 12)     --> 함수 호출 시 넣어주는 argument들의 위치가 정해진다.      
(첫번째 자리에 있는 "nico"는 name의 argument로, 두번재 자리에 있는 12는 age의 argument로 보내질 것이다.)

<keyword argument>
자리(position)에 대하여 더 이상 신경쓰지 않을 때 중요해진다. 자리에 신경쓰지 않는 대신 argument의 이름을 신경쓰는 것이다
argument의 이름(parameter)을 argument 앞에 적어주면 된다..

ex) 위 함수를 호출할 때 say_hello(age=12, name="nico") 라고 적어도 똑같이 정상적으로 작동한다. 
이렇게 하면 위처럼 argument의 순서를 신경 쓰지 않아도 된다.

즉, 둘의 차이는 순서를 신경쓰고 신경쓰지 않고의 차이이다.


2. print(soup.find_all('section', class_="jobs"))는 가져온 html에서 class가 "jobs"인 모든 section을 찾으라는 의미를 가진 코드였다.
class에 _를 붙여준 이유는 class라는 keyword는 이미 python에서 사용하고 있기 때문이다. else와 if 같은 것들을 변수명으로 설정할 수 없는 
것과 같은 원리로 이해하면 된다. 