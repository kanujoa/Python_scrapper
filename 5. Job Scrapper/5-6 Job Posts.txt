1. jobs 클래스를 가진 section을 몇 개 받았는지를 확인해 보자.

else:
  soup = BeautifulSoup(response.text, "html.parser")
  jobs = soup.find_all("section", class_="jobs")     --> jobs라는 class를 가진 section을 모두 찾은 결과가 list에 담겨져서 나온다.
  print(len(jobs))     --> len()함수는 길이(요소의 개수)를 반환해 주는 함수이다
결과는 2라고 나온다. jobs 클래스를 가진 section은 2개 존재하는 것을 확인하였으므로 코드가 정상적으로 돌아갔음을 알 수 있다.


2. 내가 실행하고 싶은 코드는 ul 안에 있는 모든 li들이다. <li>들은 <section> 하부 <article> 하부 <ul>하부에 위치하여 있다.
list의 각 항목에 대한 코드를 실행하고 싶을 때 무엇을 사용해야 할까?
'반복문'(for) 을 이용하여 코드를 작성하면 된다.

else:
  soup = BeautifulSoup(response.text, "html.parser")
  jobs = soup.find_all("section", class_="jobs")     
  for job_section in jobs:     --> job_section은 곧 jobs 리스트의 요소 하나하나가 된다.
    print(job_section.find_all("li"))     --> job_section에서 <li>를 모두 찾아 반환한다. 
결과로 <li>에 해당하는 긴 코드들이 나온다. but for문을 이용한 print이기 때문에 job_section에 대입된 요소가 바뀔 때마다 print가 되므로
list가 2개 나온 것을 볼 수 있다. (jobs 클래스를 가진 section이 2개 존재하므로 list도 2개가 나와야 한다.)

for job_section in jobs:
   job_posts = job_section.find_all("li")     --> job_posts는 list 안의 <li>들을 의미하는 변수이다.
   for post in job_posts:
     print(post)     --> <li>.....</li>가 출력된다. (첫번째 리스트에서의 첫번째 <li>부터 두번째 리스트(마지막 리스트)에서의 마지막 <li>까지 모두 출력된다.)
     print("///////////////")     --> <li>.....</li>가 하나씩 출력될 때마다 아래에 출력되어 seperator 역할을 한다.


3. but 문제가 하나 있다. 가장 마지막으로 출력된 class가 "view-all"인 <li>를 보자. 이것을 사이트에서 직접 찾아보면 누르면 더 많은 구인 정보를
보여주는 버튼인 것을 볼 수 있다. 이것을 우리는 제외하고 싶다.
이것은 규칙이 있는데, 항상 맨 마지막 순서의 <li>에 해당한다는 것이다.
앞에서 만들어 놓은 job_posts는 <section>안에 있는 <li>들을 요소로 하는 리스트였다.(리스트 2개) 리스트는 mutable하기 때문에 이 성질
을 이용하여 리스트에서 마지막 요소를 지워주기만 하면 된다. (view all <li>는 항상 마지막 요소이기 때문에)
--> 'pop' 메소드 사용: pop 메소드는 리스트에서 한 항목을 제외한다.for job_section in jobs:

for job_section in jobs:    
  job_posts = job_section.find_all("li")
  job_posts.pop(-1)     --> 주목!! pop 메소드에 삭제하고 싶은 항목의 argument로써 index를 넣어주면 그것이 삭제가 된다.
  for post in job_posts:
      print(post)
      print("///////////////")
 
결과로 class가 view_all인 <li>가 모두 사라진 것을 볼 수 있다.
