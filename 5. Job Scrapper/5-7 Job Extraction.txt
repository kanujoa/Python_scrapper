1. 사이트에서 <li>를 열어보면 링크가 있는 <a> tag를 볼 수 있다. 이 a tag에 있는 링크는 자세한 제용 정보를 알려주는 링크이다. 따라서 
우리는 이것을 저장해 두어야 하므로 가져와야 한다.
그것 말고도 <a>에 속해 있는 <span>에 해당하는 정보(company, title, featured, company)들도 가져와야 한다.

우리는 지금까지 BeautifulSoup로 HTML에 있는 것들을 찾아보았다. 그런데 BeautifulSoup에는 모든 HTML tag를 beautifulsoup entity(객체)
로 만드는 기능 또한 있다.
우리가 앞에서 job_section.findall('li')라는 코드를 작성하여 job_posts라는 변수에 담았다. 이때 findall 메소드를 사용해 주었는데 이것은 
section tag들이 요소로 이루어져 있는 리스트인 job_section이 객체로 작용이 가능하였기에 가능한 일이다.
같은 원리로 post를 이용하여 각 li의 내부로 갈 수 있다. (post.findall("a"))

but <div>tag로 감싸져 있는 <a>에서의 주소는 원하지 않으므로 이 또한 고려해 주어야 한다. (여기서의 주소는 회사 정보를 알려주는 
곳으로 이동하는 링크이다.) 이 <a>는 우리가 필요로 하는 <a>보다 항상 앞에 있는, 맨 첫번째로 있는 tag이다. 따라서 첫번째 <a>를 제거하는 
코드를 작성하면 된다. 또는 다 지우는 것 대신에 = anchors[1]을 작성하여 우리가 필요한 두 번째 <a> 부분만 anchor로 만드는 것이 더 
효율적이다.

for post in job_posts:
      anchors = post.find_all("a")
      anchor = anchors[1]


2. 이제 나는 <a> 안에 있는 href에 접근하고 싶다. 
BeautifulSoup는 모든 HTML 태그들이 dictionary처럼 바뀌게 한다.
ex) 위 코드에 이어서 pirnt(anchor["href"]) 라고 작성해 보자. href를 key값으로 가지는 value를 출력하는 코드이다.
     --> 결과: 내가 저장하고자 했던 주소들이 모두 출력된다. 우리는 이것들을 모두 엑셀에 저장할 것이다.

for post in job_posts:
  anchors = post.find_all("a")
  anchor = anchors[1]
  link = anchor['href']


3. 그리고 이제 anchor 안에 있는 span에 접근해야 한다. 이 span들은 회사 이름(company), 직업 이름(title), full-time인지 part-time인지 
고용 형태(company), 지역(region company) 같은 것들을 담고 있었다.
span tag들의 id에 company라는 단어가 여러 번 들어간 것을 볼 수 있다. 이는 별로 좋지 않다. 이는 파이썬 문법으로 처리가 가능하다.

python에서 object의 list를 가지고 있고 list의 길이를 안다면 list에서 object를 가져오는 쉬운 코드가 있다.

ex) list_of_numbers = [1, 2, 3] 이러한 리스트가 있다고 해보자. 리스트의 요소를 가져오는데 first = list_of_numbers[0]
second = list_of_numbers[1] .......... 이러한 식으로 일일이 하나씩 가지고 오는 것은 비효율적이다.
위와 같은 방법 대신 first, second, third = list_of_numbers 이렇게 하면 python은 우리가 리스트의 첫번째 요소를 first에 놓기를 원하고, 
두번째 요소를 second에 놓기를 원하고 .... 이러한 것을 인지할 것이다. 리스트의 길이를 알 때만 가능하다는 것도 기억하자.

결과는 1, 2, 3이 차례로 나오는 것을 확인할 수 있다.


4. class가 company인 span을 모두 찾고, 나오는 순서 차례로 company, kind, region 변수에 담아보자.

for post in job_posts:
  anchors = post.find_all("a")
  anchor = anchors[1]
  link = anchor['href']
  company, kind, region = anchor.find_all('span', class_="company")

print(company, kind, region)     --> 결과로 모든 우리가 원하는 것들이 나왔다. 줄바꿈이 되어있는 부분을 보면서 회사를 구분할 수 있다.


5. 마지막으로는 직업 이름인 title이 필요하다. 이것 역시 같은 원리로 title을 class로 가지는 span을 가져오면 된다.
title = anchor.find('span', class_="title") 이것을 바로 아래에 추가해 주면 된다.
find_all은 결과를 리스트로 반환해 주므로 그냥 text로 받기 위해서는 'find' 메소드를 사용하면 된다. class가 title인 span을 다른 용도로
사용하지 않을 것이기 때문이다.

print("///////////////")
print(company, kind, region, title)
print("///////////////") 를 추가로 적어주면 for문을 한번 돌때마다 구분자로 구분되어 결과가 나온다.
 
이제 다음 시간에 HTML의 tag 부분을 제외하고 text 부분만 꺼내오는 것을 하면 된다. 